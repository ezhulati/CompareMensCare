---
import { Star, ArrowRight, CheckCircle } from 'lucide-astro';

interface Props {
  brandSlug: string;
  brandName: string;
  rating?: number;
  recommendationType?: 'top-pick' | 'budget' | 'premium' | 'best-for';
  bestFor?: string;
  highlights?: string[];
  ctaText?: string;
  price?: string;
  useAffiliate?: boolean; // If true, links to /go/[brand] instead of /[brand]
}

const {
  brandSlug,
  brandName,
  rating = 4.5,
  recommendationType = 'top-pick',
  bestFor,
  highlights = [],
  ctaText,
  price,
  useAffiliate = false,
} = Astro.props;

const typeConfig = {
  'top-pick': {
    badge: 'Top Pick',
    badgeClass: 'bg-blue-600 text-white',
    borderClass: 'border-blue-200 bg-blue-50',
  },
  'budget': {
    badge: 'Best Value',
    badgeClass: 'bg-emerald-600 text-white',
    borderClass: 'border-emerald-200 bg-emerald-50',
  },
  'premium': {
    badge: 'Premium',
    badgeClass: 'bg-purple-600 text-white',
    borderClass: 'border-purple-200 bg-purple-50',
  },
  'best-for': {
    badge: bestFor || 'Recommended',
    badgeClass: 'bg-amber-600 text-white',
    borderClass: 'border-amber-200 bg-amber-50',
  },
};

const config = typeConfig[recommendationType];
const linkHref = useAffiliate ? `/go/${brandSlug}` : `/${brandSlug}`;
const defaultCtaText = useAffiliate ? `Visit ${brandName}` : `See ${brandName} Review`;
---

<div class={`rounded-xl border-2 ${config.borderClass} p-6 my-6`}>
  <div class="flex items-start justify-between mb-4">
    <div>
      <span class={`inline-block px-3 py-1 rounded-full text-xs font-semibold ${config.badgeClass} mb-3`}>
        {config.badge}
      </span>
      <h3 class="text-2xl font-bold text-slate-900 mb-1">
        {brandName}
      </h3>
      {rating && (
        <div class="flex items-center gap-1">
          {Array.from({ length: 5 }).map((_, i) => (
            <Star
              class={`w-4 h-4 ${i < Math.floor(rating) ? 'fill-amber-400 text-amber-400' : 'text-slate-300'}`}
            />
          ))}
          <span class="text-sm text-slate-600 ml-1">
            {rating.toFixed(1)} / 5.0
          </span>
        </div>
      )}
    </div>
    {price && (
      <div class="text-right">
        <div class="text-sm text-slate-600 mb-1">From</div>
        <div class="text-2xl font-bold text-slate-900">{price}</div>
      </div>
    )}
  </div>

  {highlights.length > 0 && (
    <ul class="space-y-2 mb-6">
      {highlights.map((highlight) => (
        <li class="flex items-start gap-2 text-slate-700">
          <CheckCircle class="w-5 h-5 text-emerald-600 flex-shrink-0 mt-0.5" />
          <span>{highlight}</span>
        </li>
      ))}
    </ul>
  )}

  <div class="flex flex-wrap gap-3">
    <a
      href={linkHref}
      class="inline-flex items-center gap-2 px-6 py-3 bg-brand-accent hover:bg-blue-700 text-white font-semibold rounded-lg transition-colors group"
    >
      {ctaText || defaultCtaText}
      <ArrowRight class="w-4 h-4 group-hover:translate-x-1 transition-transform" />
    </a>
    {!useAffiliate && (
      <a
        href={`/go/${brandSlug}`}
        class="inline-flex items-center gap-2 px-6 py-3 border-2 border-slate-300 hover:border-slate-400 text-slate-700 font-semibold rounded-lg transition-colors"
      >
        Visit Site
      </a>
    )}
  </div>
</div>
