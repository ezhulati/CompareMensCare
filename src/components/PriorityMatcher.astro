---
interface Priority {
  id: string;
  label: string;
  icon: string;
  description: string;
}

const priorities: Priority[] = [
  {
    id: 'affordability',
    label: 'Best Value',
    icon: 'üí∞',
    description: 'Lowest cost per dose',
  },
  {
    id: 'privacy',
    label: 'Maximum Privacy',
    icon: 'üîí',
    description: 'Discreet packaging & billing',
  },
  {
    id: 'speed',
    label: 'Fast Access',
    icon: '‚ö°',
    description: 'Same/next-day availability',
  },
  {
    id: 'selection',
    label: 'Treatment Variety',
    icon: 'üéØ',
    description: 'Wide range of options',
  },
  {
    id: 'transparency',
    label: 'Price Transparency',
    icon: 'üìä',
    description: 'Clear pricing, no surprises',
  },
  {
    id: 'ease',
    label: 'Easy to Use',
    icon: '‚ú®',
    description: 'Perfect for first-timers',
  },
  {
    id: 'support',
    label: 'Great Support',
    icon: 'üí¨',
    description: 'Responsive customer care',
  },
  {
    id: 'insurance',
    label: 'Insurance Accepted',
    icon: 'üè•',
    description: 'Works with your plan',
  },
  {
    id: 'comprehensive',
    label: 'One-Stop Shop',
    icon: 'üè™',
    description: 'Multiple health services',
  },
];

const { category = 'general' } = Astro.props;
---

<div class="priority-matcher bg-white rounded-3xl border border-slate-200 p-8 lg:p-12 shadow-sm">
  <div class="text-center mb-10">
    <h2 class="text-3xl lg:text-4xl font-bold text-slate-900 mb-3">
      What Matters Most to You?
    </h2>
    <p class="text-lg text-slate-600 max-w-2xl mx-auto">
      Select your priorities and we'll show you the best match. No rankings, just the right fit for your needs.
    </p>
  </div>

  <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 mb-8">
    {priorities.map((priority) => (
      <button
        type="button"
        data-priority={priority.id}
        class="priority-card group relative card-hover p-6 text-left cursor-pointer transition-all duration-200 focus-ring"
      >
        <div class="flex items-start gap-4">
          <span class="text-4xl transition-transform duration-200 group-hover:scale-110">
            {priority.icon}
          </span>
          <div class="flex-1 min-w-0">
            <h3 class="font-semibold text-slate-900 mb-1 group-hover:text-brand-accent transition-colors">
              {priority.label}
            </h3>
            <p class="text-sm text-slate-600">
              {priority.description}
            </p>
          </div>
        </div>

        <!-- Selected Indicator -->
        <div class="selected-indicator absolute top-4 right-4 w-6 h-6 rounded-full border-2 border-slate-300 bg-white transition-all duration-200 flex items-center justify-center">
          <svg class="w-4 h-4 text-white opacity-0 transition-opacity duration-200" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
          </svg>
        </div>
      </button>
    ))}
  </div>

  <div class="text-center">
    <button
      id="find-matches-btn"
      class="btn-primary px-8 py-3 text-lg disabled:opacity-50 disabled:cursor-not-allowed"
      disabled
    >
      Find My Best Match
    </button>
    <p class="text-sm text-slate-500 mt-3">
      Select at least one priority to continue
    </p>
  </div>
</div>

<style>
  .priority-card.selected {
    @apply border-brand-accent bg-brand-accent/5;
  }

  .priority-card.selected .selected-indicator {
    @apply border-brand-accent bg-brand-accent;
  }

  .priority-card.selected .selected-indicator svg {
    @apply opacity-100;
  }
</style>

<script>
  document.addEventListener('astro:page-load', () => {
    const priorityCards = document.querySelectorAll('.priority-card');
    const findMatchesBtn = document.getElementById('find-matches-btn') as HTMLButtonElement;
    const selectedPriorities = new Set<string>();

    priorityCards.forEach((card) => {
      card.addEventListener('click', () => {
        const priorityId = card.getAttribute('data-priority');
        if (!priorityId) return;

        // Toggle selection
        if (selectedPriorities.has(priorityId)) {
          selectedPriorities.delete(priorityId);
          card.classList.remove('selected');
        } else {
          selectedPriorities.add(priorityId);
          card.classList.add('selected');
        }

        // Enable/disable button based on selection
        findMatchesBtn.disabled = selectedPriorities.size === 0;
      });

      // Add keyboard support
      card.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          (card as HTMLElement).click();
        }
      });
    });

    // Handle find matches button
    findMatchesBtn?.addEventListener('click', () => {
      const priorities = Array.from(selectedPriorities);

      // Store in session storage for use across pages
      sessionStorage.setItem('userPriorities', JSON.stringify(priorities));

      // Navigate to results or scroll to comparison
      const comparisonSection = document.getElementById('categories');
      if (comparisonSection) {
        comparisonSection.scrollIntoView({ behavior: 'smooth' });

        // Add a subtle highlight animation
        comparisonSection.classList.add('animate-pulse');
        setTimeout(() => {
          comparisonSection.classList.remove('animate-pulse');
        }, 2000);
      }

      // Analytics event
      if (typeof window !== 'undefined' && (window as any).gtag) {
        (window as any).gtag('event', 'priority_selection', {
          priorities: priorities.join(','),
        });
      }
    });
  });
</script>
