---
interface Priority {
  id: string;
  label: string;
  icon: string;
  description: string;
}

const priorities: Priority[] = [
  {
    id: 'affordability',
    label: 'Best Value',
    icon: 'üí∞',
    description: 'Lowest cost per dose',
  },
  {
    id: 'privacy',
    label: 'Maximum Privacy',
    icon: 'üîí',
    description: 'Discreet packaging & billing',
  },
  {
    id: 'speed',
    label: 'Fast Access',
    icon: '‚ö°',
    description: 'Same/next-day availability',
  },
  {
    id: 'selection',
    label: 'Treatment Variety',
    icon: 'üéØ',
    description: 'Wide range of options',
  },
  {
    id: 'transparency',
    label: 'Price Transparency',
    icon: 'üìä',
    description: 'Clear pricing, no surprises',
  },
  {
    id: 'ease',
    label: 'Easy to Use',
    icon: '‚ú®',
    description: 'Perfect for first-timers',
  },
  {
    id: 'support',
    label: 'Great Support',
    icon: 'üí¨',
    description: 'Responsive customer care',
  },
  {
    id: 'insurance',
    label: 'Insurance Accepted',
    icon: 'üè•',
    description: 'Works with your plan',
  },
  {
    id: 'comprehensive',
    label: 'One-Stop Shop',
    icon: 'üè™',
    description: 'Multiple health services',
  },
];

const { category = 'general' } = Astro.props;
---

<div class="priority-matcher bg-white rounded-3xl border border-slate-200 p-8 lg:p-12 shadow-sm">
  <!-- Progress Indicator -->
  <div class="flex items-center justify-center gap-2 mb-8">
    <div class="flex items-center gap-2">
      <div class="w-8 h-8 rounded-full bg-brand-accent text-white flex items-center justify-center text-sm font-bold">1</div>
      <span class="text-sm font-medium text-slate-900">Select Priorities</span>
    </div>
    <svg class="w-4 h-4 text-slate-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
    </svg>
    <div class="flex items-center gap-2">
      <div class="w-8 h-8 rounded-full bg-slate-200 text-slate-500 flex items-center justify-center text-sm font-bold">2</div>
      <span class="text-sm text-slate-500">Get Matches</span>
    </div>
    <svg class="w-4 h-4 text-slate-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
    </svg>
    <div class="flex items-center gap-2">
      <div class="w-8 h-8 rounded-full bg-slate-200 text-slate-500 flex items-center justify-center text-sm font-bold">3</div>
      <span class="text-sm text-slate-500">Choose Service</span>
    </div>
  </div>

  <div class="text-center mb-10">
    <h2 class="text-3xl lg:text-4xl font-bold text-slate-900 mb-3">
      What Matters Most to You?
    </h2>
    <p class="text-lg text-slate-600 max-w-2xl mx-auto mb-2">
      Select 1-3 priorities that matter most. We'll rank services based on your choices.
    </p>
    <p class="text-sm text-slate-500">
      ‚ö° Takes 30 seconds ‚Ä¢ üîí No email required
    </p>
  </div>

  <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 mb-8">
    {priorities.map((priority) => (
      <button
        type="button"
        data-priority={priority.id}
        class="priority-card group relative card-hover p-6 text-left cursor-pointer transition-all duration-200 focus-ring"
      >
        <div class="flex items-start gap-4">
          <span class="text-4xl transition-transform duration-200 group-hover:scale-110">
            {priority.icon}
          </span>
          <div class="flex-1 min-w-0">
            <h3 class="font-semibold text-slate-900 mb-1 group-hover:text-brand-accent transition-colors">
              {priority.label}
            </h3>
            <p class="text-sm text-slate-600">
              {priority.description}
            </p>
          </div>
        </div>

        <!-- Selected Indicator -->
        <div class="selected-indicator absolute top-4 right-4 w-6 h-6 rounded-full border-2 border-slate-300 bg-white transition-all duration-200 flex items-center justify-center">
          <svg class="w-4 h-4 text-white opacity-0 transition-opacity duration-200" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
          </svg>
        </div>
      </button>
    ))}
  </div>

  <div class="text-center">
    <button
      id="find-matches-btn"
      class="btn-primary px-8 py-3 text-lg disabled:opacity-50 disabled:cursor-not-allowed group"
      disabled
    >
      <span class="btn-text">Find My Best Match</span>
      <svg class="w-5 h-5 ml-2 inline-block group-hover:translate-x-1 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
      </svg>
    </button>
    <p id="selection-count" class="text-sm text-slate-500 mt-3">
      Select at least one priority to continue
    </p>
  </div>
</div>

<style>
  .priority-card.selected {
    @apply border-brand-accent bg-brand-accent/5;
  }

  .priority-card.selected .selected-indicator {
    @apply border-brand-accent bg-brand-accent;
  }

  .priority-card.selected .selected-indicator svg {
    @apply opacity-100;
  }
</style>

<script>
  // Run on initial page load and after Astro navigation
  function initPriorityMatcher() {
    const priorityCards = document.querySelectorAll('.priority-card');
    const findMatchesBtn = document.getElementById('find-matches-btn') as HTMLButtonElement;

    if (!findMatchesBtn || priorityCards.length === 0) return;

    const selectedPriorities = new Set<string>();

    priorityCards.forEach((card) => {
      card.addEventListener('click', () => {
        const priorityId = card.getAttribute('data-priority');
        if (!priorityId) return;

        // Toggle selection
        if (selectedPriorities.has(priorityId)) {
          selectedPriorities.delete(priorityId);
          card.classList.remove('selected');
        } else {
          selectedPriorities.add(priorityId);
          card.classList.add('selected');
        }

        // Enable/disable button and update UI based on selection
        const count = selectedPriorities.size;
        findMatchesBtn.disabled = count === 0;

        // Update selection count text
        const selectionCount = document.getElementById('selection-count');
        if (selectionCount) {
          if (count === 0) {
            selectionCount.textContent = 'Select at least one priority to continue';
            selectionCount.className = 'text-sm text-slate-500 mt-3';
          } else {
            selectionCount.textContent = `${count} ${count === 1 ? 'priority' : 'priorities'} selected ‚Ä¢ Ready to find matches!`;
            selectionCount.className = 'text-sm text-emerald-600 font-medium mt-3';
          }
        }
      });

      // Add keyboard support
      card.addEventListener('keydown', (e: Event) => {
        const keyEvent = e as KeyboardEvent;
        if (keyEvent.key === 'Enter' || keyEvent.key === ' ') {
          keyEvent.preventDefault();
          (card as HTMLElement).click();
        }
      });
    });

    // Handle find matches button
    findMatchesBtn?.addEventListener('click', () => {
      const priorities = Array.from(selectedPriorities);

      // Store in session storage for use across pages (using consistent key)
      sessionStorage.setItem('selectedPriorities', JSON.stringify(priorities));

      // Trigger recommendations update
      window.dispatchEvent(new CustomEvent('priorities-updated'));

      // Show loading state
      const originalContent = findMatchesBtn.innerHTML;
      findMatchesBtn.innerHTML = `
        <svg class="animate-spin h-5 w-5 mx-auto" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
      `;
      findMatchesBtn.disabled = true;

      // Reset button after recommendations load
      setTimeout(() => {
        findMatchesBtn.innerHTML = originalContent;
        findMatchesBtn.disabled = selectedPriorities.size === 0;
      }, 1500);

      // Analytics event
      if (typeof window !== 'undefined' && (window as any).gtag) {
        (window as any).gtag('event', 'priority_selection', {
          priorities: priorities.join(','),
        });
      }
    });
  }

  // Initialize on page load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initPriorityMatcher);
  } else {
    initPriorityMatcher();
  }

  // Also support Astro view transitions if enabled in future
  document.addEventListener('astro:page-load', initPriorityMatcher);
</script>
