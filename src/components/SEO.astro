---
export interface Props {
  title: string;
  description: string;
  canonical?: string;
  image?: string;
  type?: 'website' | 'article';
  publishDate?: Date;
  author?: string;
  schema?: Record<string, unknown>;
}

const {
  title,
  description,
  canonical = Astro.url.href,
  image = '/images/og-default.jpg',
  type = 'website',
  publishDate,
  author,
  schema,
} = Astro.props;

const siteName = 'CompareMensCare.com';
const MIN_TITLE_LENGTH = 50;
const MAX_TITLE_LENGTH = 60;
const MIN_DESCRIPTION_LENGTH = 140;
const MAX_DESCRIPTION_LENGTH = 160;

const normalizeWhitespace = (value: string) => value.replace(/\s+/g, ' ').trim();

const trimToWordBoundary = (value: string, limit: number) => {
  if (value.length <= limit) {
    return value;
  }

  const truncated = value.slice(0, limit + 1);
  const lastSpace = truncated.lastIndexOf(' ');
  if (lastSpace === -1) {
    return truncated.slice(0, limit).trim();
  }

  return truncated.slice(0, lastSpace).trim();
};

const applyTitleFormatting = (rawTitle: string) => {
  const brandSuffixes = [
    ` | ${siteName}`,
    ' | CompareMensCare',
    " | CompareMensCare Men's Health",
    " | Trusted Men's Health Comparisons",
  ];
  const fillerSuffixes = [' for Men', ' Guide', " Men's Health Guide", ' Insights'];

  const separators = [':', ' - ', ' – ', ' — ', ' | '];
  const brandPattern = new RegExp(`\\s*[|\\-–—:]?\\s*CompareMensCare(?:\\.com)?(?:\\s*|$)`, 'i');

  let formatted = normalizeWhitespace(rawTitle);
  let includesBrand = brandPattern.test(formatted);

  if (includesBrand) {
    const withoutBrand = normalizeWhitespace(formatted.replace(brandPattern, ''));
    if (withoutBrand.length >= MIN_TITLE_LENGTH - 5 && withoutBrand.length <= MAX_TITLE_LENGTH) {
      formatted = withoutBrand;
      includesBrand = false;
    } else if (formatted.length > MAX_TITLE_LENGTH) {
      formatted = withoutBrand;
      includesBrand = false;
    }
  }

  if (formatted.length > MAX_TITLE_LENGTH) {
    formatted = normalizeWhitespace(formatted.replace(/\b20\d{2}\b/g, ''));
  }

  if (formatted.length > MAX_TITLE_LENGTH) {
    for (const separator of separators) {
      let index = formatted.indexOf(separator);
      if (index === -1) {
        const trimmedSeparator = separator.trim();
        if (trimmedSeparator !== separator) {
          index = formatted.indexOf(trimmedSeparator);
        }
      }

      if (index > 0) {
        const candidate = formatted.slice(0, index).trim();
        if (candidate.length >= MIN_TITLE_LENGTH && candidate.length <= MAX_TITLE_LENGTH) {
          formatted = candidate;
          break;
        }
      }
    }
  }

  if (formatted.length > MAX_TITLE_LENGTH) {
    formatted = trimToWordBoundary(formatted, MAX_TITLE_LENGTH);
  }

  if (!includesBrand) {
    for (const suffix of brandSuffixes) {
      const candidate = `${formatted}${suffix}`.trim();
      const candidateLength = candidate.length;
      if (candidateLength >= MIN_TITLE_LENGTH && candidateLength <= MAX_TITLE_LENGTH) {
        formatted = candidate;
        includesBrand = true;
        break;
      }
    }
  }

  if (formatted.length < MIN_TITLE_LENGTH) {
    for (const suffix of fillerSuffixes) {
      const candidate = `${formatted}${suffix}`.trim();
      if (candidate.length >= MIN_TITLE_LENGTH && candidate.length <= MAX_TITLE_LENGTH) {
        formatted = candidate;
        break;
      }
    }

    for (const suffix of brandSuffixes) {
      const candidate = `${formatted}${suffix}`.trim();
      if (candidate.length <= MAX_TITLE_LENGTH) {
        formatted = candidate;
        break;
      }
    }
  }

  if (formatted.length > MAX_TITLE_LENGTH) {
    formatted = trimToWordBoundary(formatted, MAX_TITLE_LENGTH);
  }

  return formatted;
};

const applyDescriptionFormatting = (rawDescription: string) => {
  const supplementalCopy = ' Compare telehealth pricing, treatments, and provider pros and cons to choose confidently.';
  let formatted = normalizeWhitespace(rawDescription);

  if (formatted.length > MAX_DESCRIPTION_LENGTH) {
    formatted = trimToWordBoundary(formatted, MAX_DESCRIPTION_LENGTH);
    if (!/[.!?]$/.test(formatted)) {
      formatted = `${formatted}.`;
    }
  }

  if (formatted.length < MIN_DESCRIPTION_LENGTH) {
    const availableSpace = MAX_DESCRIPTION_LENGTH - formatted.length;
    if (availableSpace > 0) {
      const addition = trimToWordBoundary(supplementalCopy.trim(), availableSpace).trim();
      formatted = `${formatted}${formatted.endsWith('.') ? '' : '.'}${addition ? ` ${addition}` : ''}`.trim();
    }
  }

  return formatted.length > MAX_DESCRIPTION_LENGTH
    ? trimToWordBoundary(formatted, MAX_DESCRIPTION_LENGTH)
    : formatted;
};

const formattedTitle = applyTitleFormatting(title);
const formattedDescription = applyDescriptionFormatting(description);
const imageUrl = new URL(image, Astro.site).toString();
---

<!-- Primary Meta Tags -->
<title>{formattedTitle}</title>
<meta name="title" content={formattedTitle} />
<meta name="description" content={formattedDescription} />
<link rel="canonical" href={canonical} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content={type} />
<meta property="og:url" content={canonical} />
<meta property="og:title" content={formattedTitle} />
<meta property="og:description" content={formattedDescription} />
<meta property="og:image" content={imageUrl} />
<meta property="og:site_name" content={siteName} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={canonical} />
<meta property="twitter:title" content={formattedTitle} />
<meta property="twitter:description" content={formattedDescription} />
<meta property="twitter:image" content={imageUrl} />

<!-- Article Meta Tags -->
{type === 'article' && publishDate && (
  <>
    <meta property="article:published_time" content={publishDate instanceof Date ? publishDate.toISOString() : publishDate} />
    {author && <meta property="article:author" content={author} />}
  </>
)}

<!-- JSON-LD Schema -->
{schema && (
  <script type="application/ld+json" set:html={JSON.stringify(schema)} />
)}

<!-- Additional Meta Tags -->
<meta name="robots" content="index, follow" />
<meta name="googlebot" content="index, follow" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<meta charset="UTF-8" />
